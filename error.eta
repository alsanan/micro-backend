<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>🚫 Server error</title>
    <link rel="stylesheet" href="cdn/metro.css">
    <style>
      [error] { 
        outline:2px dashed red; 
        font-weight:800; 
        font-size:1.5rem; 
        width:fit-content;
        padding-inline: 2rem;
        margin-inline:auto;
      }
      [stack] { 
        line-height: 1.5;
        padding: 1rem 2rem;
        color:white;
      }
      [suggestion] pre { white-space: pre-wrap; }
      summary { max-width: 8rem; }
      [querying]:after {
        content: "⌛";
        position: absolute;
        margin: -1rem 0 0 2rem;
        font-size: 3rem;
        animation: rotate 2s linear infinite;
      }
      @keyframes rotate { 0% {transform: rotate(0deg);} 100% {transform: rotate(360deg);} }
      body { padding:2rem; }
      footer {
        inset: auto 0 0 0;
        position: fixed;
        background: var(--pico-mark-background-color);
        min-width: 100vw !important;
        text-align: center;
        padding-block: 0.3rem !important;
      }
    </style>
  </head>
<body>

<article>
<h1 title="{{JSON.stringify(it)}}">🚫 Error del servidor al procesar la petici&oacute;n...</h1>

<pre error>{{it.errormessage}}</pre>

<details><summary>🔗 url</summary><div url></div></details>


<details><summary>🩺 context</summary>
  <pre><code context>{{it.errorcontext}}</code></pre>
  <h2 style="margin-top:0">stack</h2>
  <pre stack><li>{{it.formattedStack?.replace(/\.mjs/g,'').split(/\n/).join('<li>')}}</pre>
  <p suggestion onmousewheel="this.firstElementChild.disabled=false;">
    <button disabled onclick="getAI()">Query AI...</button>
  </p>
  
</details>

<details><summary>🌡️ params</summary>
  <div json>{{ JSON.stringify(this) }}</div>
</details>

<footer>
  &copy; alsanan 2024
  <!-- based on https://leo-xee.github.io/static/b492073f3a6f84abfab45b147db056f3/c1b63/next-window-01.png -->
</footer>

<script src="cdn/highlight/highlight.min.js"></script>
<script src="cdn/highlight/javascript.min.js"></script>
<script>

hljs.highlightAll();

document.querySelector('[url]').innerText= location.href;

function displayJSON(data) {
  if (data instanceof Array) {
    const list = document.createElement('ul');
    data.forEach(item => {
      const listItem = document.createElement('li');
      displayJSON(item, listItem);
      list.appendChild(listItem);
    });
    return (list);
  } else if (typeof data === 'object') {
    const list = document.createElement('ul');
    Object.keys(data).forEach(key => {
      const listItem = document.createElement('li');
      listItem.innerHTML = `<b>${key}:</b>`;
      let resa= displayJSON(data[key]);
      if (typeof resa=='string') resa= document.createTextNode(resa)
      try { 
        listItem.appendChild(resa);
      } catch {}
      list.appendChild(listItem);
    });
    return(list);
  } else {
    if (typeof data == 'boolean') return data?'TRUE':'FALSE';
    return data;
  }
}

const jsonContainer = document.querySelector('[json]');
const data= JSON.parse(jsonContainer.innerHTML);
jsonContainer.innerText='';
jsonContainer.appendChild(displayJSON(data))

async function getErrorSuggestionFromAI(errorMessage, errorContext) {
  const apiKey = localStorage.getItem('apikey');
  const prompt = `Error: ${errorMessage}\nContext:\n${errorContext}\nSugerencia para resolver:`;
  const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${apiKey}`,
      },
      body: JSON.stringify({
          model: 'gpt-3.5-turbo', // O usa 'gpt-4' si prefieres la versión más reciente
          messages: [
              { role: 'system', content: 'You are a helpful assistant.' },
              { role: 'user', content: prompt }
          ],
          max_tokens: 150,
      })
  });
  if (!response.ok) {
      const errorDetails = await response.text();
      console.error('Error response:', errorDetails);
      throw new Error(`Request failed with status ${response.status}`);
  }
  const data = await response.json();
  return data.choices[0].message.content;
}
function getAI() {
  document.querySelector('[suggestion] button').disabled= true;
  document.querySelector('[suggestion] button').setAttribute('querying',1);
  getErrorSuggestionFromAI(
    document.querySelector('[error]').innerText,
    document.querySelector('[context]').innerText
  )
  .then(ai=>{
    document.querySelector('[suggestion]').innerHTML= `<h2>IA:</h2><pre><code>${ai}</code></pre>`;
    hljs.highlightAll();
  })
}


</script>
<style>

#json-container {
  font-family: monospace; /* Use a monospace font for better code readability */
  white-space: pre;       /* Preserve whitespace and line breaks */
  padding: 10px;
  border: 1px solid #ccc;
}
#json-container li {
  margin-bottom: 5px;
}

#json-container li b {
  font-weight: bold;
  color: #333;
}

</style>